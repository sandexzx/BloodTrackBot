import os
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from database import Database
import tempfile

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
db = Database()

# States
class BloodPressure(StatesGroup):
    waiting_for_systolic = State()
    waiting_for_diastolic = State()
    waiting_for_pulse = State()

# Keyboards
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ")],
            [KeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π")],
        ],
        resize_keyboard=True
    )
    return keyboard

def get_history_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )
    return keyboard

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è.\n\n"
        "üí™ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞–≤–ª–µ–Ω–∏—è –∏ –ø—É–ª—å—Å–∞.\n"
        "üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda message: message.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ")
async def add_measurement(message: types.Message, state: FSMContext):
    await message.answer("üîù –í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ö–Ω–µ–µ (—Å–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ) –¥–∞–≤–ª–µ–Ω–∏–µ:")
    await state.set_state(BloodPressure.waiting_for_systolic)

@dp.message(BloodPressure.waiting_for_systolic)
async def process_systolic(message: types.Message, state: FSMContext):
    try:
        systolic = int(message.text)
        if not (60 <= systolic <= 250):
            raise ValueError
        await state.update_data(systolic=systolic)
        await message.answer("üîª –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∂–Ω–µ–µ (–¥–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ) –¥–∞–≤–ª–µ–Ω–∏–µ:")
        await state.set_state(BloodPressure.waiting_for_diastolic)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 60 –¥–æ 250):")

@dp.message(BloodPressure.waiting_for_diastolic)
async def process_diastolic(message: types.Message, state: FSMContext):
    try:
        diastolic = int(message.text)
        if not (40 <= diastolic <= 150):
            raise ValueError
        await state.update_data(diastolic=diastolic)
        await message.answer("üíì –í–≤–µ–¥–∏—Ç–µ –ø—É–ª—å—Å:")
        await state.set_state(BloodPressure.waiting_for_pulse)
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 40 –¥–æ 150):")

@dp.message(BloodPressure.waiting_for_pulse)
async def process_pulse(message: types.Message, state: FSMContext):
    try:
        pulse = int(message.text)
        if not (40 <= pulse <= 200):
            raise ValueError
        
        data = await state.get_data()
        current_time = datetime.now()
        
        # Save to database
        db.add_measurement(message.from_user.id, data['systolic'], data['diastolic'], pulse)
        
        await message.answer(
            f"‚úÖ –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n\n"
            f"üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {current_time.strftime('%d-%m-%Y %H:%M')}\n"
            f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {data['systolic']}/{data['diastolic']}\n"
            f"üíì –ü—É–ª—å—Å: {pulse}",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É–ª—å—Å–∞ (–æ—Ç 40 –¥–æ 200):")

@dp.message(lambda message: message.text == "üìä –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π")
async def show_history(message: types.Message):
    measurements = db.get_user_measurements(message.from_user.id)
    
    if not measurements:
        await message.answer(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π.",
            reply_markup=get_main_keyboard()
        )
        return
    
    history_text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è:\n\n"
    for systolic, diastolic, pulse, timestamp in measurements:
        # Convert string timestamp to datetime object
        dt = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S.%f')
        history_text += (
            f"üïí –î–∞—Ç–∞: {dt.strftime('%d-%m-%Y %H:%M')}\n"
            f"üìä –î–∞–≤–ª–µ–Ω–∏–µ: {systolic}/{diastolic}\n"
            f"üíì –ü—É–ª—å—Å: {pulse}\n"
            f"{'‚îÄ' * 20}\n"
        )
    
    await message.answer(
        history_text,
        reply_markup=get_history_keyboard()
    )

@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    stats = db.get_user_statistics(message.from_user.id)
    
    if not stats["averages"]["systolic"]:
        await message.answer(
            "üì≠ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=get_history_keyboard()
        )
        return
    
    stats_text = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π:\n\n"
    
    # Averages
    stats_text += "üìä –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
    stats_text += f"üí™ –î–∞–≤–ª–µ–Ω–∏–µ: {stats['averages']['systolic']}/{stats['averages']['diastolic']}\n"
    stats_text += f"üíì –ü—É–ª—å—Å: {stats['averages']['pulse']}\n\n"
    
    # Min/Max
    stats_text += "üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
    stats_text += f"üí™ –î–∞–≤–ª–µ–Ω–∏–µ: {stats['min_max']['systolic']['min']}/{stats['min_max']['diastolic']['min']}\n"
    stats_text += f"üíì –ü—É–ª—å—Å: {stats['min_max']['pulse']['min']}\n\n"
    
    stats_text += "üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n"
    stats_text += f"üí™ –î–∞–≤–ª–µ–Ω–∏–µ: {stats['min_max']['systolic']['max']}/{stats['min_max']['diastolic']['max']}\n"
    stats_text += f"üíì –ü—É–ª—å—Å: {stats['min_max']['pulse']['max']}"
    
    await message.answer(
        stats_text,
        reply_markup=get_history_keyboard()
    )

@dp.message(lambda message: message.text == "üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
async def export_data(message: types.Message):
    measurements = db.get_all_user_measurements(message.from_user.id)
    
    if not measurements:
        await message.answer(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π.",
            reply_markup=get_history_keyboard()
        )
        return
    
    # Create temporary file
    with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as temp_file:
        # Write header
        temp_file.write("–î–Ω–µ–≤–Ω–∏–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è\n")
        temp_file.write("=" * 40 + "\n\n")
        
        # Write measurements
        for systolic, diastolic, pulse, timestamp in measurements:
            dt = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S.%f')
            temp_file.write(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {dt.strftime('%d-%m-%Y %H:%M')}\n")
            temp_file.write(f"–î–∞–≤–ª–µ–Ω–∏–µ: {systolic}/{diastolic}\n")
            temp_file.write(f"–ü—É–ª—å—Å: {pulse}\n")
            temp_file.write("-" * 40 + "\n")
    
    # Send file
    with open(temp_file.name, 'rb') as file:
        await message.answer_document(
            document=types.FSInputFile(file.name, filename="blood_pressure_measurements.txt"),
            caption="üì• –í–∞—à–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
            reply_markup=get_history_keyboard()
        )
    
    # Clean up
    os.unlink(temp_file.name)

@dp.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 